import logging
import os
import traceback

import unity_python.common.utils as utils

def spawn_process_in_environment(
        executable,
        args,
        wantLogging = True,
        env_override = {},
        show_window = False,
        kwargs = None,
        ):
    """
    Spawn a subprocess in the appropriate environment.

    This is used to spawn the client, and it's used to check that the client will work.

    env_override is used to override the client environment; it expects a key:value dict.
    Use a value of None to unset the environment variable.

    show_window is off by default; when set, the subprocess will spawn a text window with stdin/stdout being in that window.

    kwargs is passed to subprocess.Popen, in case extra arguments are required

    Returns a Popen on success, and None on failure.
    """
    import subprocess
    args = [executable] + args

    # put our site-packages in the client's PYTHONPATH, using our own current location
    python_paths = [os.path.normpath(os.path.dirname(os.path.abspath(__file__)) + "/../..")]
    client_environment = dict(os.environ)
    if 'PYTHONPATH' in client_environment:
        python_paths.append(client_environment['PYTHONPATH'])
    client_environment['PYTHONPATH'] = os.pathsep.join(python_paths)

    # Make sure the client is doing unbuffered writes to stdout/stderr
    client_environment['PYTHONUNBUFFERED'] = "1"

    # Apply overrides to the client's environment
    for key, value in env_override.items():
        # if None, remove from environment
        if value is None:
            del client_environment[key]
        else:
            client_environment[key] = value

    if kwargs is None:
        kwargs = {}

    if show_window:
        # TODO: on platforms other than windows, create a window.
        pass
    else:
        # On Windows, hide the window that otherwise pops up.
        # On other platforms, there's no action to take.
        # STARTUPINFO is Windows-only.
        try:
            si = subprocess.STARTUPINFO()
            si.dwFlags = subprocess.STARTF_USESHOWWINDOW
            kwargs['startupinfo'] = si
        except AttributeError:
            pass

    if wantLogging:
        utils.log(f"Python for Unity: Creating client process: {' '.join(args)} with PYTHONPATH={client_environment['PYTHONPATH']}")
    try:
        return subprocess.Popen(args, env=client_environment, close_fds=True, **kwargs)
    except:
        if wantLogging:
            utils.log(f"Could not launch the client process. Please refer to the com.unity.scripting.python documentation on how to configure Python for Unity. Stack on Client:\n{traceback.format_exc()}", logging.ERROR)
        return None
