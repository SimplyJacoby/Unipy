import unittest
from unity_python.common.spawn_process import spawn_process_in_environment

import os
import sys
import tempfile

# Find a Python executable.
try:
    # When running in Unity test runner find it in the library
    import UnityEngine
    if sys.platform == 'win32':
        python_exe = 'Library/PythonInstall/python.exe'
    else:
        python_exe = 'Library/PythonInstall/bin/python'
except ModuleNotFoundError:
    # When running independent of Unity just use the current Python
    python_exe = sys.executable
print(f"Python is {python_exe}")


class TestSpawnProcess(unittest.TestCase):
    def run_test(self, script, **kwargs):
        with tempfile.TemporaryDirectory() as d:
            # Spawn a process and write the result in the directory.
            # The script takes one argument: the directory, and write
            # 'stdout.txt' and 'stderr.txt' there.
            scriptfile = os.path.join(os.path.dirname(__file__), 'spawn_tests', script)
            proc = spawn_process_in_environment(python_exe, [ scriptfile, d ], **kwargs)
            proc.wait()
            try:
                with open(os.path.join(d, 'stderr.txt')) as f:
                    stderr = f.read()
            except IOError:
                stderr = ''
            try:
                with open(os.path.join(d, 'stdout.txt')) as f:
                    stdout = f.read()
            except IOError:
                stdout = ''
            print (f"got stderr [{stderr}]\ngot stdout [{stdout}]")
            return stdout, stderr

    def test_version(self):
        stdout, stderr = self.run_test('version.py')
        self.assertTrue(sys.version.strip() == stdout.strip())

    def test_default_environment(self):
        stdout, stderr = self.run_test('pythonpath.py')
        site_packages = os.path.normpath(os.path.dirname(os.path.abspath(__file__)) + "/../..")
        print ("expect [" + site_packages + "]")
        self.assertTrue(site_packages in stdout.split("\n"))

    def test_custom_environment(self):
        key = 'asdfjaskljs'
        env = { key : '1' }
        stdout, stderr = self.run_test('custom_environment.py', env_override = env)
        self.assertTrue(stderr == '')
        self.assertTrue(stdout == "1\n")
